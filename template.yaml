AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "Koekalenteri"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
# TODO Check lambda sizing etc... KOE-6
Globals:
  Function:
    Runtime: nodejs14.x
    Timeout: 60
    Tracing: Active
    MemorySize: 1024 # From Lambda Power Tuner - https://lambda-power-tuning.show/#gAAAAQACAAQACMAL;Fu+DQkrxg0JplAJBPCnQQBhL0EDm+NlA;m1ZfNJtW3zSbVl81m1bfNZtWXzaaA6Q2
    Tags:
      Application: serverless-web-app
  Api:
    Auth:
      UsagePlan:
        UsagePlanName: DailyUsagePlan
        CreateUsagePlan: PER_API
        Description: This will limit 5000 executions per day and throttle executions on 10% of that.
        Quota:
          Limit: 5000
          Period: DAY
        Throttle:
          BurstLimit: 100
          RateLimit: 50

Parameters:
  VersionParam:
    Type: String
    Default: v1
  StageNameParam:
    Type: String
    Default: prod
  CognitoDomainName:
    Type: String
    Default: koekalenteri

  # For Amplify Console frontend hosting
  Repository:
    Type: String
    Description: GitHub Repository URL
  Branch:
    Type: String
    Description: GitHub Branch
    Default: main
  OauthToken:
    Type: String
    Description: GitHub Oauth Token
    NoEcho: true

Resources:

#cognito declaration
  KoekalenteriUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolName: KoekalenteriUsers
      UsernameAttributes:
      - email
      AutoVerifiedAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true

  KoekalenteriUserPoolTokenClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref KoekalenteriUserPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: ['code', 'implicit']
      CallbackURLs: ['http://localhost:3000', 'http://localhost:8080' ,'https://localhost', !Join ['', ['https://', !GetAtt AmplifyBranch.BranchName, '.', !GetAtt AmplifyApp.DefaultDomain]]]
      SupportedIdentityProviders: ['COGNITO']
      AllowedOAuthScopes: ['email', 'openid']
      ExplicitAuthFlows:
      - USER_PASSWORD_AUTH

  KoekalenteriDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Join ['-', [!Ref CognitoDomainName, !Ref AWS::StackName]]
      UserPoolId: !Ref KoekalenteriUserPool

  EventTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ['-', [event-table, 'v2', !Ref AWS::StackName]]
      KeySchema:
          - AttributeName: eventType
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
      AttributeDefinitions:
          - AttributeName: eventType
            AttributeType: S
          - AttributeName: id
            AttributeType: S
      Tags:
        - Key: Env
          Value: !Ref AWS::StackName
        - Key: Label
          Value: "koekalenteri"
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: false

  EventRegistrationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ['-', [event-registration-table, !Ref AWS::StackName]]
      KeySchema:
          - AttributeName: eventId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
      AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
      Tags:
        - Key: Env
          Value: !Ref AWS::StackName
        - Key: Label
          Value: "koekalenteri"
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: false

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ['-', [user-table, !Ref AWS::StackName]]
      KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: cognito-username
            KeyType: RANGE
      AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: cognito-username
            AttributeType: S
      Tags:
        - Key: Env
          Value: !Ref AWS::StackName
        - Key: Label
          Value: "koekalenteri"
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: false

  JudgeTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ['-', [judge-table, 'v2', !Ref AWS::StackName]]
      KeySchema:
          - AttributeName: id
            KeyType: HASH
      AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
      Tags:
        - Key: Env
          Value: !Ref AWS::StackName
        - Key: Label
          Value: "koekalenteri"
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: false

  OfficialTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ['-', [official-table, !Ref AWS::StackName]]
      KeySchema:
          - AttributeName: id
            KeyType: HASH
      AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
      Tags:
        - Key: Env
          Value: !Ref AWS::StackName
        - Key: Label
          Value: "koekalenteri"
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: false

  OrganizerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ['-', [organizer-table, 'v2', !Ref AWS::StackName]]
      KeySchema:
          - AttributeName: id
            KeyType: HASH
      AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
      Tags:
        - Key: Env
          Value: !Ref AWS::StackName
        - Key: Label
          Value: "koekalenteri"
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: false

  DogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ['-', [dog-table, !Ref AWS::StackName]]
      KeySchema:
          - AttributeName: regNo
            KeyType: HASH
      AttributeDefinitions:
          - AttributeName: regNo
            AttributeType: S
      Tags:
        - Key: Env
          Value: !Ref AWS::StackName
        - Key: Label
          Value: "koekalenteri"
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: false

  EventTypeTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ['-', [event-type-table, 'v2', !Ref AWS::StackName]]
      KeySchema:
          - AttributeName: eventType
            KeyType: HASH
      AttributeDefinitions:
          - AttributeName: eventType
            AttributeType: S
      Tags:
        - Key: Env
          Value: !Ref AWS::StackName
        - Key: Label
          Value: "koekalenteri"
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: false

  # TODO Rest of table definitions, maybe split tables into separate file?

  # API declaration
  KoekalenteriApi:
    Type: AWS::Serverless::Api
    MethodSettings:
        DataTraceEnabled: true
        MetricsEnabled: true
        HttpMethod: '*'
        ResourcePath: !Sub '${VersionParam}/*'
        LoggingLevel: INFO
    AccessLogSetting:
      DestinationArn: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ApiAccessLogGroup}'
      Format: '$context.identity.sourceIp $context.authorizer.claims.sub [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.requestId $context.awsEndpointRequestId $context.xrayTraceId $context.responseLatency $context.integrationLatency "$context.error.message"'
    Properties:
      Name: KoekalenteriApi
      StageName: !Ref StageNameParam
      TracingEnabled: true
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'OPTIONS,HEAD,GET,PUT,POST,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt "KoekalenteriUserPool.Arn"

  # API Functions
  GetEventsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: koekalenteri-backend
      Handler: dist/handlers/event.getEventsHandler
      Layers:
        - !Ref CommonLayer
      Tracing: Active
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EventTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref EventTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          USE_DYNAMODB_LOCAL: "0"
          DYNAMODB_LOCAL_URI: ""

      Events:
        GetEvents:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /event
            Method: get
            RestApiId: !Ref KoekalenteriApi

  GetEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: koekalenteri-backend
      Handler: dist/handlers/event.getEventHandler
      Layers:
        - !Ref CommonLayer
      Tracing: Active
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EventTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref EventTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /event/{eventType}/{id}
            Method: get
            RestApiId: !Ref KoekalenteriApi

  GetAdminEventsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: koekalenteri-backend
      Handler: dist/handlers/event.getEventsHandler
      Layers:
        - !Ref CommonLayer
      Tracing: Active
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EventTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref EventTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          USE_DYNAMODB_LOCAL: "0"
          DYNAMODB_LOCAL_URI: ""

      Events:
        GetEvents:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /admin/event
            Method: get
            RestApiId: !Ref KoekalenteriApi

  PutEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: koekalenteri-backend
      Handler: dist/handlers/event.putEventHandler
      Layers:
        - !Ref CommonLayer
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref EventTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

      Events:
        PutEvent:
          Type: Api
          Properties:
            Path: /admin/event
            Method: POST
            RestApiId: !Ref KoekalenteriApi
            #Auth:
            #  Authorizer: CognitoAuthorizer

  GetRegistrationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: koekalenteri-backend
      Handler: dist/handlers/event.getRegistrationsHandler
      Layers:
        - !Ref CommonLayer
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventRegistrationTable
        - DynamoDBCrudPolicy:
            TableName: !Ref EventTable
        - CloudWatchPutMetricPolicy: {}

      Environment:
        Variables:
          TABLE_NAME: !Ref EventRegistrationTable
          EVENT_TABLE_NAME : !Ref EventTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /registration/{eventId}
            Method: GET
            RestApiId: !Ref KoekalenteriApi

  GetRegistrationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: koekalenteri-backend
      Handler: dist/handlers/event.getRegistrationHandler
      Layers:
        - !Ref CommonLayer
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventRegistrationTable
        - CloudWatchPutMetricPolicy: {}

      Environment:
        Variables:
          TABLE_NAME: !Ref EventRegistrationTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /registration/{eventId}/{id}
            Method: GET
            RestApiId: !Ref KoekalenteriApi

  PutRegistrationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: koekalenteri-backend
      Handler: dist/handlers/event.putRegistrationHandler
      Layers:
        - !Ref CommonLayer
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventRegistrationTable
        - DynamoDBCrudPolicy:
            TableName: !Ref EventTable
        - CloudWatchPutMetricPolicy: {}
        - Statement:
            - Sid: SESSendEmailPolicy
              Effect: Allow
              Action:
              - ses:sendTemplatedEmail
              Resource: '*'

      Environment:
        Variables:
          TABLE_NAME: !Ref EventRegistrationTable
          EVENT_TABLE_NAME : !Ref EventTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

      Events:
        PutEvent:
          Type: Api
          Properties:
            Path: /event/register
            Method: POST
            RestApiId: !Ref KoekalenteriApi

  GetJudgesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: koekalenteri-backend
      Handler: dist/handlers/judge.getJudgesHandler
      Layers:
        - !Ref CommonLayer
      Tracing: Active
      Policies:
        - Statement:
            - Sid: SSMGetParameterPolicy
              Effect: Allow
              Action:
              - ssm:GetParameters
              - ssm:GetParameter
              Resource: '*'
        - DynamoDBCrudPolicy:
            TableName: !Ref JudgeTable
        - DynamoDBReadPolicy:
            TableName: !Ref EventTypeTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref JudgeTable
          EVENT_TYPE_TABLE_NAME : !Ref EventTypeTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

      Events:
        GetJudges:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /judge
            Method: get
            RestApiId: !Ref KoekalenteriApi

  PutJudgeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: koekalenteri-backend
      Handler: dist/handlers/judge.putJudgeHandler
      Layers:
        - !Ref CommonLayer
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref JudgeTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref JudgeTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

      Events:
        PutEvent:
          Type: Api
          Properties:
            Path: /judge
            Method: POST
            RestApiId: !Ref KoekalenteriApi
            #Auth:
            #  Authorizer: CognitoAuthorizer

  GetOfficialsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: koekalenteri-backend
      Handler: dist/handlers/official.getOfficialsHandler
      Layers:
        - !Ref CommonLayer
      Tracing: Active
      Policies:
        - Statement:
            - Sid: SSMGetParameterPolicy
              Effect: Allow
              Action:
              - ssm:GetParameters
              - ssm:GetParameter
              Resource: '*'
        - DynamoDBCrudPolicy:
            TableName: !Ref OfficialTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref OfficialTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

      Events:
        GetOfficials:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /official
            Method: get
            RestApiId: !Ref KoekalenteriApi

  GetOrganizersFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: koekalenteri-backend
      Handler: dist/handlers/organizer.getOrganizersHandler
      Layers:
        - !Ref CommonLayer
      Tracing: Active
      Policies:
        - Statement:
            - Sid: SSMGetParameterPolicy
              Effect: Allow
              Action:
              - ssm:GetParameters
              - ssm:GetParameter
              Resource: '*'
        - DynamoDBCrudPolicy:
            TableName: !Ref OrganizerTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref OrganizerTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

      Events:
        GetOrganizers:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /organizer
            Method: get
            RestApiId: !Ref KoekalenteriApi

  GetDogFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: koekalenteri-backend
      Handler: dist/handlers/dog.getDogHandler
      Layers:
        - !Ref CommonLayer
      Tracing: Active
      Policies:
        - Statement:
            - Sid: SSMGetParameterPolicy
              Effect: Allow
              Action:
              - ssm:GetParameters
              - ssm:GetParameter
              Resource: '*'
        - CloudWatchPutMetricPolicy: {}
        - DynamoDBCrudPolicy:
            TableName: !Ref DogTable
      Environment:
        Variables:
          TABLE_NAME: !Ref DogTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

      Events:
        getDog:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /dog/{regNo}
            Method: get
            RestApiId: !Ref KoekalenteriApi

  GetEventTypesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: koekalenteri-backend
      Handler: dist/handlers/eventType.getEventTypesHandler
      Layers:
        - !Ref CommonLayer
      Tracing: Active
      Policies:
        - Statement:
            - Sid: SSMGetParameterPolicy
              Effect: Allow
              Action:
              - ssm:GetParameters
              - ssm:GetParameter
              Resource: '*'
        - CloudWatchPutMetricPolicy: {}
        - DynamoDBCrudPolicy:
            TableName: !Ref EventTypeTable
      Environment:
        Variables:
          TABLE_NAME: !Ref EventTypeTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

      Events:
        getDog:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /eventType
            Method: get
            RestApiId: !Ref KoekalenteriApi

  PutEventTypeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: koekalenteri-backend
      Handler: dist/handlers/eventType.putEventTypeHandler
      Layers:
        - !Ref CommonLayer
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventTypeTable
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME: !Ref EventTypeTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

      Events:
        PutEvent:
          Type: Api
          Properties:
            Path: /eventType
            Method: POST
            RestApiId: !Ref KoekalenteriApi
            #Auth:
            #  Authorizer: CognitoAuthorizer

  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
        LayerName: koekalenteri-shared
        Description: Shared resources between BE and FE
        ContentUri: koekalenteri-shared/
        CompatibleRuntimes:
          - nodejs14.x
        LicenseInfo: 'MIT'
        RetentionPolicy: Retain

  # TODO Rest of API definitions, maybe split APIs in separate file? what about autogenerate from OpenAPI?
  # This role allows API Gateway to push execution and access logs to CloudWatch logs

  ApiGatewayPushToCloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: "Push logs to CloudWatch logs from API Gateway"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"


  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/AccessLog-${KoekalenteriApi}
      RetentionInDays: 365

  # Amplify console hosting for static website
  #
  AmplifyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - amplify.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: Amplify
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "amplify:*"
                Resource: "*"

  AmplifyApp:
    Type: "AWS::Amplify::App"
    Properties:
      Name: Koekalenteri
      Repository: !Ref Repository
      Description: Koekalenteri
      OauthToken: !Ref OauthToken
      BuildSpec: |-
        version: 0.1
        frontend:
          phases:
            build:
              commands:
                - cd koekalenteri-frontend
                - npm ci
                - npm run build
          artifacts:
            baseDirectory: koekalenteri-frontend/build
            files:
              - '**/*'
      Tags:
        - Key: Name
          Value: Koekalenteri
      IAMServiceRole: !GetAtt AmplifyRole.Arn

  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      BranchName: !Ref Branch
      AppId: !GetAtt AmplifyApp.AppId
      Description: Amplify Console Branch
      EnableAutoBuild: true
      Tags:
        - Key: Name
          Value: koekalenteri-amplify-console
        - Key: Branch
          Value: !Ref Branch

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  KoekalenteriFunctionApi:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${KoekalenteriApi}.execute-api.${AWS::Region}.amazonaws.com/{StageNameParam}"
  CognitoID:
    Description: The Cognito UserPool ID
    Value: !Ref KoekalenteriUserPool
  CognitoClientID:
    Description: The Cognito UserPool Client ID
    Value: !Ref KoekalenteriUserPoolTokenClient
  CognitoDomainName:
    Description: The Cognito Hosted UI Domain Name
    Value: !Join ['', [!Ref CognitoDomainName, '-', !Ref AWS::StackName, '.auth.', !Ref AWS::Region, '.amazoncognito.com']]
  AmplifyURL:
    Value: !Join ['', ['https://', !GetAtt AmplifyBranch.BranchName, '.', !GetAtt AmplifyApp.DefaultDomain]]
